// Code generated by MockGen. DO NOT EDIT.
// Source: auth_interfaces.go

// Package app is a generated GoMock package.
package app

import (
	subscribs "github.com/alekns/yahe/pkg/subscribs"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserRepositoryService is a mock of UserRepositoryService interface
type MockUserRepositoryService struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryServiceMockRecorder
}

// MockUserRepositoryServiceMockRecorder is the mock recorder for MockUserRepositoryService
type MockUserRepositoryServiceMockRecorder struct {
	mock *MockUserRepositoryService
}

// NewMockUserRepositoryService creates a new mock instance
func NewMockUserRepositoryService(ctrl *gomock.Controller) *MockUserRepositoryService {
	mock := &MockUserRepositoryService{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepositoryService) EXPECT() *MockUserRepositoryServiceMockRecorder {
	return m.recorder
}

// GetByLogin mocks base method
func (m *MockUserRepositoryService) GetByLogin(tenantID TenantID, login string) (*User, error) {
	ret := m.ctrl.Call(m, "GetByLogin", tenantID, login)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLogin indicates an expected call of GetByLogin
func (mr *MockUserRepositoryServiceMockRecorder) GetByLogin(tenantID, login interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLogin", reflect.TypeOf((*MockUserRepositoryService)(nil).GetByLogin), tenantID, login)
}

// GetByIDs mocks base method
func (m *MockUserRepositoryService) GetByIDs(tenantID TenantID, userID UserID) (*User, error) {
	ret := m.ctrl.Call(m, "GetByIDs", tenantID, userID)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDs indicates an expected call of GetByIDs
func (mr *MockUserRepositoryServiceMockRecorder) GetByIDs(tenantID, userID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDs", reflect.TypeOf((*MockUserRepositoryService)(nil).GetByIDs), tenantID, userID)
}

// Save mocks base method
func (m *MockUserRepositoryService) Save(user *User) (*User, error) {
	ret := m.ctrl.Call(m, "Save", user)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save
func (mr *MockUserRepositoryServiceMockRecorder) Save(user interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockUserRepositoryService)(nil).Save), user)
}

// MockJwtRepositoryService is a mock of JwtRepositoryService interface
type MockJwtRepositoryService struct {
	ctrl     *gomock.Controller
	recorder *MockJwtRepositoryServiceMockRecorder
}

// MockJwtRepositoryServiceMockRecorder is the mock recorder for MockJwtRepositoryService
type MockJwtRepositoryServiceMockRecorder struct {
	mock *MockJwtRepositoryService
}

// NewMockJwtRepositoryService creates a new mock instance
func NewMockJwtRepositoryService(ctrl *gomock.Controller) *MockJwtRepositoryService {
	mock := &MockJwtRepositoryService{ctrl: ctrl}
	mock.recorder = &MockJwtRepositoryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockJwtRepositoryService) EXPECT() *MockJwtRepositoryServiceMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockJwtRepositoryService) GetAll(tenantID TenantID, userID UserID) ([]Jwt, error) {
	ret := m.ctrl.Call(m, "GetAll", tenantID, userID)
	ret0, _ := ret[0].([]Jwt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockJwtRepositoryServiceMockRecorder) GetAll(tenantID, userID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockJwtRepositoryService)(nil).GetAll), tenantID, userID)
}

// GetByIDs mocks base method
func (m *MockJwtRepositoryService) GetByIDs(tenantID TenantID, userID UserID, tokenID JwtID) (*Jwt, error) {
	ret := m.ctrl.Call(m, "GetByIDs", tenantID, userID, tokenID)
	ret0, _ := ret[0].(*Jwt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDs indicates an expected call of GetByIDs
func (mr *MockJwtRepositoryServiceMockRecorder) GetByIDs(tenantID, userID, tokenID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDs", reflect.TypeOf((*MockJwtRepositoryService)(nil).GetByIDs), tenantID, userID, tokenID)
}

// Save mocks base method
func (m *MockJwtRepositoryService) Save(token *Jwt) (*Jwt, error) {
	ret := m.ctrl.Call(m, "Save", token)
	ret0, _ := ret[0].(*Jwt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save
func (mr *MockJwtRepositoryServiceMockRecorder) Save(token interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockJwtRepositoryService)(nil).Save), token)
}

// RemoveAll mocks base method
func (m *MockJwtRepositoryService) RemoveAll(tenantID TenantID, userID UserID) error {
	ret := m.ctrl.Call(m, "RemoveAll", tenantID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll
func (mr *MockJwtRepositoryServiceMockRecorder) RemoveAll(tenantID, userID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockJwtRepositoryService)(nil).RemoveAll), tenantID, userID)
}

// Remove mocks base method
func (m *MockJwtRepositoryService) Remove(token *Jwt) error {
	ret := m.ctrl.Call(m, "Remove", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockJwtRepositoryServiceMockRecorder) Remove(token interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockJwtRepositoryService)(nil).Remove), token)
}

// MockPasswordService is a mock of PasswordService interface
type MockPasswordService struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordServiceMockRecorder
}

// MockPasswordServiceMockRecorder is the mock recorder for MockPasswordService
type MockPasswordServiceMockRecorder struct {
	mock *MockPasswordService
}

// NewMockPasswordService creates a new mock instance
func NewMockPasswordService(ctrl *gomock.Controller) *MockPasswordService {
	mock := &MockPasswordService{ctrl: ctrl}
	mock.recorder = &MockPasswordServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPasswordService) EXPECT() *MockPasswordServiceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockPasswordService) Create(salt []byte, password string) ([]byte, error) {
	ret := m.ctrl.Call(m, "Create", salt, password)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockPasswordServiceMockRecorder) Create(salt, password interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPasswordService)(nil).Create), salt, password)
}

// Verify mocks base method
func (m *MockPasswordService) Verify(salt []byte, srcPassword string, hashedPassword []byte) (bool, error) {
	ret := m.ctrl.Call(m, "Verify", salt, srcPassword, hashedPassword)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify
func (mr *MockPasswordServiceMockRecorder) Verify(salt, srcPassword, hashedPassword interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockPasswordService)(nil).Verify), salt, srcPassword, hashedPassword)
}

// MockJwtService is a mock of JwtService interface
type MockJwtService struct {
	ctrl     *gomock.Controller
	recorder *MockJwtServiceMockRecorder
}

// MockJwtServiceMockRecorder is the mock recorder for MockJwtService
type MockJwtServiceMockRecorder struct {
	mock *MockJwtService
}

// NewMockJwtService creates a new mock instance
func NewMockJwtService(ctrl *gomock.Controller) *MockJwtService {
	mock := &MockJwtService{ctrl: ctrl}
	mock.recorder = &MockJwtServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockJwtService) EXPECT() *MockJwtServiceMockRecorder {
	return m.recorder
}

// SignAndEncode mocks base method
func (m *MockJwtService) SignAndEncode(attrs JwtAttrs) (string, error) {
	ret := m.ctrl.Call(m, "SignAndEncode", attrs)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignAndEncode indicates an expected call of SignAndEncode
func (mr *MockJwtServiceMockRecorder) SignAndEncode(attrs interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignAndEncode", reflect.TypeOf((*MockJwtService)(nil).SignAndEncode), attrs)
}

// VerifyAndDecode mocks base method
func (m *MockJwtService) VerifyAndDecode(tokenString string) (JwtAttrs, error) {
	ret := m.ctrl.Call(m, "VerifyAndDecode", tokenString)
	ret0, _ := ret[0].(JwtAttrs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyAndDecode indicates an expected call of VerifyAndDecode
func (mr *MockJwtServiceMockRecorder) VerifyAndDecode(tokenString interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAndDecode", reflect.TypeOf((*MockJwtService)(nil).VerifyAndDecode), tokenString)
}

// MockDomainEvents is a mock of DomainEvents interface
type MockDomainEvents struct {
	ctrl     *gomock.Controller
	recorder *MockDomainEventsMockRecorder
}

// MockDomainEventsMockRecorder is the mock recorder for MockDomainEvents
type MockDomainEventsMockRecorder struct {
	mock *MockDomainEvents
}

// NewMockDomainEvents creates a new mock instance
func NewMockDomainEvents(ctrl *gomock.Controller) *MockDomainEvents {
	mock := &MockDomainEvents{ctrl: ctrl}
	mock.recorder = &MockDomainEventsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDomainEvents) EXPECT() *MockDomainEventsMockRecorder {
	return m.recorder
}

// UserCreated mocks base method
func (m *MockDomainEvents) UserCreated() subscribs.EventHandler {
	ret := m.ctrl.Call(m, "UserCreated")
	ret0, _ := ret[0].(subscribs.EventHandler)
	return ret0
}

// UserCreated indicates an expected call of UserCreated
func (mr *MockDomainEventsMockRecorder) UserCreated() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCreated", reflect.TypeOf((*MockDomainEvents)(nil).UserCreated))
}

// UserStatusChanged mocks base method
func (m *MockDomainEvents) UserStatusChanged() subscribs.EventHandler {
	ret := m.ctrl.Call(m, "UserStatusChanged")
	ret0, _ := ret[0].(subscribs.EventHandler)
	return ret0
}

// UserStatusChanged indicates an expected call of UserStatusChanged
func (mr *MockDomainEventsMockRecorder) UserStatusChanged() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserStatusChanged", reflect.TypeOf((*MockDomainEvents)(nil).UserStatusChanged))
}

// UserResetPassword mocks base method
func (m *MockDomainEvents) UserResetPassword() subscribs.EventHandler {
	ret := m.ctrl.Call(m, "UserResetPassword")
	ret0, _ := ret[0].(subscribs.EventHandler)
	return ret0
}

// UserResetPassword indicates an expected call of UserResetPassword
func (mr *MockDomainEventsMockRecorder) UserResetPassword() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserResetPassword", reflect.TypeOf((*MockDomainEvents)(nil).UserResetPassword))
}

// UserPasswordChanged mocks base method
func (m *MockDomainEvents) UserPasswordChanged() subscribs.EventHandler {
	ret := m.ctrl.Call(m, "UserPasswordChanged")
	ret0, _ := ret[0].(subscribs.EventHandler)
	return ret0
}

// UserPasswordChanged indicates an expected call of UserPasswordChanged
func (mr *MockDomainEventsMockRecorder) UserPasswordChanged() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserPasswordChanged", reflect.TypeOf((*MockDomainEvents)(nil).UserPasswordChanged))
}

// MockUserApp is a mock of UserApp interface
type MockUserApp struct {
	ctrl     *gomock.Controller
	recorder *MockUserAppMockRecorder
}

// MockUserAppMockRecorder is the mock recorder for MockUserApp
type MockUserAppMockRecorder struct {
	mock *MockUserApp
}

// NewMockUserApp creates a new mock instance
func NewMockUserApp(ctrl *gomock.Controller) *MockUserApp {
	mock := &MockUserApp{ctrl: ctrl}
	mock.recorder = &MockUserAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserApp) EXPECT() *MockUserAppMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockUserApp) Create(tenantID TenantID, user *User) (*User, error) {
	ret := m.ctrl.Call(m, "Create", tenantID, user)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockUserAppMockRecorder) Create(tenantID, user interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserApp)(nil).Create), tenantID, user)
}

// GetUserBy mocks base method
func (m *MockUserApp) GetUserBy(tenantID TenantID, login, password string) (*User, error) {
	ret := m.ctrl.Call(m, "GetUserBy", tenantID, login, password)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBy indicates an expected call of GetUserBy
func (mr *MockUserAppMockRecorder) GetUserBy(tenantID, login, password interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBy", reflect.TypeOf((*MockUserApp)(nil).GetUserBy), tenantID, login, password)
}

// ChangePassword mocks base method
func (m *MockUserApp) ChangePassword(tenantID TenantID, userID UserID, oldPassword, newPassword string) (*User, error) {
	ret := m.ctrl.Call(m, "ChangePassword", tenantID, userID, oldPassword, newPassword)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangePassword indicates an expected call of ChangePassword
func (mr *MockUserAppMockRecorder) ChangePassword(tenantID, userID, oldPassword, newPassword interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockUserApp)(nil).ChangePassword), tenantID, userID, oldPassword, newPassword)
}

// ResetPassword mocks base method
func (m *MockUserApp) ResetPassword(tenantID TenantID, userID UserID, newPassword string) (*User, error) {
	ret := m.ctrl.Call(m, "ResetPassword", tenantID, userID, newPassword)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetPassword indicates an expected call of ResetPassword
func (mr *MockUserAppMockRecorder) ResetPassword(tenantID, userID, newPassword interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockUserApp)(nil).ResetPassword), tenantID, userID, newPassword)
}

// MockJwtApp is a mock of JwtApp interface
type MockJwtApp struct {
	ctrl     *gomock.Controller
	recorder *MockJwtAppMockRecorder
}

// MockJwtAppMockRecorder is the mock recorder for MockJwtApp
type MockJwtAppMockRecorder struct {
	mock *MockJwtApp
}

// NewMockJwtApp creates a new mock instance
func NewMockJwtApp(ctrl *gomock.Controller) *MockJwtApp {
	mock := &MockJwtApp{ctrl: ctrl}
	mock.recorder = &MockJwtAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockJwtApp) EXPECT() *MockJwtAppMockRecorder {
	return m.recorder
}

// GetAllByUserID mocks base method
func (m *MockJwtApp) GetAllByUserID(tenantID TenantID, userID UserID) ([]JwtEncoded, error) {
	ret := m.ctrl.Call(m, "GetAllByUserID", tenantID, userID)
	ret0, _ := ret[0].([]JwtEncoded)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByUserID indicates an expected call of GetAllByUserID
func (mr *MockJwtAppMockRecorder) GetAllByUserID(tenantID, userID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByUserID", reflect.TypeOf((*MockJwtApp)(nil).GetAllByUserID), tenantID, userID)
}

// Create mocks base method
func (m *MockJwtApp) Create(tenantID TenantID, login, password string, request *JwtAppCreateRequest) (JwtEncoded, error) {
	ret := m.ctrl.Call(m, "Create", tenantID, login, password, request)
	ret0, _ := ret[0].(JwtEncoded)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockJwtAppMockRecorder) Create(tenantID, login, password, request interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJwtApp)(nil).Create), tenantID, login, password, request)
}

// Validate mocks base method
func (m *MockJwtApp) Validate(tenantID TenantID, token JwtEncoded) (*JwtDecoded, error) {
	ret := m.ctrl.Call(m, "Validate", tenantID, token)
	ret0, _ := ret[0].(*JwtDecoded)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate
func (mr *MockJwtAppMockRecorder) Validate(tenantID, token interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockJwtApp)(nil).Validate), tenantID, token)
}

// Invalidate mocks base method
func (m *MockJwtApp) Invalidate(tenantID TenantID, token JwtEncoded) error {
	ret := m.ctrl.Call(m, "Invalidate", tenantID, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Invalidate indicates an expected call of Invalidate
func (mr *MockJwtAppMockRecorder) Invalidate(tenantID, token interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invalidate", reflect.TypeOf((*MockJwtApp)(nil).Invalidate), tenantID, token)
}

// InvalidateAllTokens mocks base method
func (m *MockJwtApp) InvalidateAllTokens(tenantID TenantID, userID UserID) error {
	ret := m.ctrl.Call(m, "InvalidateAllTokens", tenantID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateAllTokens indicates an expected call of InvalidateAllTokens
func (mr *MockJwtAppMockRecorder) InvalidateAllTokens(tenantID, userID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateAllTokens", reflect.TypeOf((*MockJwtApp)(nil).InvalidateAllTokens), tenantID, userID)
}
